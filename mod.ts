/**
 * @module scrypt
 * @author oplik0
 * @version 1.0.0
 */

//@deno-types="./scrypt-wasm/scrypt_wasm.d.ts"
import { scrypt, scrypt_simple, scrypt_check } from "./scrypt-wasm/scrypt_wasm.js";


export interface ScryptParameters {
  N?: number,
  r?: number,
  p?: number,
}
/**
 * Hash a password with scrypt. Outputs a string in rscrypt format.
 * @author oplik0
 * @param {string} password - Password that will be hashed
 * @param {ScryptParameters} [parameters] - Scrypt parameters (n, r and p) used for hashing. 
 * @param {number} [parameters.N=32768] - Work factor. Should be a power of 2. Defaults to 32768
 * @param {number} [parameters.r=16] - Block size. Defaults to 16
 * @param {number} [parameters.p=1] - Parralelism factor. Defaults to 1
 * @returns {string} - Hash in rscrypt format
 * @todo Add option to generate standard scrypt format
 */
export async function hash(password: string, parameters?: ScryptParameters): Promise<string> {
  parameters = parameters || {};
  const N = parameters.N || 32768;;
  const r = parameters.r || 16;
  const p = parameters.p || 1;
  return scrypt_simple(password, N, r, p);
}
/**
 * Checks provided string against provided hash
 * @author oplik0
 * @param {string} password - string that will be checked against the hash 
 * @param {string} hash - hash in rscrypt format
 * @returns {boolean} result of the check
 * @todo Handle more standard scrypt format instead of just rscrypt
 */
export async function verify(password: string, hash: string): Promise<boolean> {
  return scrypt_check(password, hash);
}

/**
 * More advanced hashing function allowing for custom salt and hash length.
 * Warning - the resulting hash doesn't contain any parameter information and won't work with verify unless it's put into rscrypt formatted string
 * @author oplik0
 * @param {string} password - Password that will be hashed
 * @param {ScryptParameters} [parameters] - Scrypt parameters (n, r and p) used for hashing. 
 * @param {number} [parameters.N=32768] - Work factor. Should be a power of 2. Defaults to 32768
 * @param {number} [parameters.r=16] - Block size. Defaults to 16
 * @param {number} [parameters.p=1] - Parralelism factor. Defaults to 1
 * @param {string} [salt] - custom salt. If none provided, a 32 byte salt will be generated by genSalt function
 * @param {number} [dklen] - length of the resulting hash
 * @returns {string} Bare hex-encoded hash 
 */
 export async function hashCustom(password: string, parameters?: ScryptParameters, salt?: string, dklen?: number): Promise<string> {
  if (salt===undefined)
    salt = await genSalt(32)
  parameters = parameters || {};
  dklen = dklen!=undefined && dklen > 0 && dklen < 137438953440 ? dklen : 32;
  const N = parameters.N || 32768;
  const r = parameters.r || 16;
  const p = parameters.p || 1;
  return scrypt(password, salt, N, r, p, dklen);
}
/**
 * generate random salt using Deno csprng (crypto.getRandomValues)
 * @author oplik0
 * @param {number} [length=32] - numebr of bytes to generate
 * @returns {string} Hex-encoded salt
 */
export async function genSalt(length?: number): Promise<string> {
  const array = new Uint8Array(length||32);
  const randomArray = crypto.getRandomValues(array);
  const salt = [...randomArray].map(byte=>byte.toString(16).padStart(2, "0")).join("");
  return salt;
}